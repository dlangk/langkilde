---
const {frontmatter} = Astro.props;
const {title, pubDate} = frontmatter || Astro.props;
---

<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>{title}</title>
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css2?family=Newsreader:ital,wght@0,400;0,700;1,400;1,700&display=swap"/>

    <style>
        /*--------------------------------------------------------------
          1. Root Variables & Theme Overrides
        --------------------------------------------------------------*/
        :root {
            --bg-color: #F6F5EF;
            --text-color: #050505;
            --font-size-base: 20px;
            --accent-color: rgba(255, 77, 0, 0.6);
            --text-fade: rgba(87, 87, 87, 0.5);
        }

        .dark {
            --bg-color: #121212;
            --text-color: #f0efea;
            --accent-color: rgba(253, 123, 58, 0.7);
            --text-fade: rgba(240, 240, 240, 0.4);
        }

        /*--------------------------------------------------------------
          2. Global Styles
        --------------------------------------------------------------*/
        :global(body) {
            font-family: "Newsreader", serif;
            font-size: var(--font-size-base);
            font-weight: 400;
            line-height: 1.6;
            color: var(--text-color);
            background-color: var(--bg-color);
            margin: 0;
            padding: 0;
            position: relative;
        }

        /* Canvas Background */
        #canvas-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        }

        :global(a) {
            color: inherit;
        }

        @media (max-width: 800px) {
            :global(main.main-inner) {
                padding-top: 4rem;
            }
        }

        /*--------------------------------------------------------------
          3. Layout Container
        --------------------------------------------------------------*/
        .layout-container {
            display: flex;
            align-items: flex-start;
            justify-content: flex-start;
            min-height: 100vh;
        }

        /*--------------------------------------------------------------
          4. Enhanced Sidebar Styles for Essays
        --------------------------------------------------------------*/
        :global(#sidebar) {
            width: 384px;
            flex: 0 0 384px;
            padding: 1.5rem;
            position: sticky;
            top: 1.5rem;
            max-height: calc(100vh - 3rem);
            overflow-y: auto;
            font-size: 14px;
            background-color: var(--bg-color);
            transition: left 0.3s ease;
            z-index: 999;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        :global(#sidebar::-webkit-scrollbar) {
            display: none;
        }

        :global(#sidebar h1) {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            color: var(--text-color);
        }

        :global(#sidebar ul) {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        :global(#sidebar ul li) {
            font-family: "Newsreader", serif;
            color: var(--text-fade);
            font-weight: 400;
            text-align: left;
            margin: 0;
        }

        /* Main navigation items */
        :global(#sidebar > ul > li) {
            font-size: 16px;
            line-height: 32px;
        }

        /* ToC Level 1 (h1) */
        :global(#sidebar #toc > li) {
            font-size: 15px;
            line-height: 28px;
            font-weight: 600;
            margin-top: 0.5rem;
        }

        /* ToC Level 2 (h2) */
        :global(#sidebar #toc li ul li) {
            font-size: 13px;
            line-height: 24px;
            padding-left: 1rem;
            font-weight: 400;
        }

        /* ToC Level 3 (h3) */
        :global(#sidebar #toc li ul li ul li) {
            font-size: 12px;
            line-height: 20px;
            padding-left: 2rem;
            color: var(--text-fade);
        }

        :global(#sidebar a.active) {
            color: var(--accent-color);
        }

        :global(.sidebar-toggle) {
            display: none;
        }

        /* Responsive Sidebar Toggle */
        @media (max-width: 800px) {
            :global(#sidebar) {
                position: fixed;
                top: 3rem;
                left: 0;
                width: 100vw;
                height: calc(100vh - 3rem);
                background: var(--bg-color);
                box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.05);
                overflow-y: auto;
                z-index: 999;
                padding: 2rem 1rem;
                transform: translateY(-100%);
                transition: transform 0.3s ease;
            }

            :global(#sidebar.open) {
                transform: translateY(0);
            }

            :global(.sidebar-toggle) {
                display: flex;
                align-items: center;
                justify-content: space-between;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 3rem;
                background-color: var(--bg-color);
                color: var(--text-color);
                border-bottom: 1px solid var(--text-fade);
                padding: 0 1rem;
                font-size: 1.2rem;
                font-weight: bold;
                z-index: 1000;
                cursor: pointer;
            }

            :global(main),
            :global(main.index-main),
            :global(main.main-inner) {
                padding-top: 4rem;
            }
        }

        /*--------------------------------------------------------------
          5. Main Content Styles
        --------------------------------------------------------------*/

        :global(main) {
            max-width: 810px;
            box-sizing: border-box;
            margin: 0;
            padding: 2rem 1rem;
        }

        :global(main img) {
            max-width: 100%;
            height: auto;
        }

        /*--------------------------------------------------------------
          6. Essay Title & Meta Styles
        --------------------------------------------------------------*/
        :global(.essay-header) {
            margin-bottom: 2rem;
        }

        :global(.essay-title) {
            font-size: 36px;
            font-weight: 700;
            margin-bottom: 0.5rem;
            line-height: 1.2;
        }

        :global(.essay-meta) {
            color: var(--text-fade);
            font-size: 16px;
            margin-bottom: 1rem;
        }

        @media (max-width: 600px) {
            :global(.essay-title) {
                font-size: 28px;
            }
            :global(.essay-meta) {
                font-size: 14px;
            }
        }

        /*--------------------------------------------------------------
          7. Essay Content Styling
        --------------------------------------------------------------*/
        :global(.essay-content h1) {
            font-size: 28px;
            font-weight: 700;
            margin: 2.5rem 0 1rem 0;
        }

        :global(.essay-content h2) {
            font-size: 24px;
            font-weight: 600;
            margin: 2rem 0 0.75rem 0;
            color: var(--text-color);
        }

        :global(.essay-content h3) {
            font-size: 20px;
            font-weight: 600;
            margin: 1.5rem 0 0.5rem 0;
            color: var(--text-color);
        }

        :global(.essay-content p) {
            margin-bottom: 1.2rem;
        }

        :global(.essay-content ul, .essay-content ol) {
            margin-bottom: 1.2rem;
            padding-left: 2rem;
        }

        :global(.essay-content li) {
            margin-bottom: 0.5rem;
        }

        /*--------------------------------------------------------------
          8. Remove Dividers
        --------------------------------------------------------------*/
        :global(hr) {
            display: none;
        }

        /*--------------------------------------------------------------
          9. Toggle Switch Styles
        --------------------------------------------------------------*/
        .toggle-switch {
            position: fixed;
            top: 1rem;
            right: 1rem;
        }

        .toggle-input {
            opacity: 0;
            width: 0;
            height: 0;
            position: absolute;
        }

        .toggle-label {
            display: block;
            width: 48px;
            height: 24px;
            background-color: #ddd;
            border-radius: 999px;
            position: relative;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .toggle-slider {
            position: absolute;
            height: 20px;
            width: 20px;
            left: 2px;
            top: 2px;
            background-color: #111;
            border-radius: 50%;
            transition: transform 0.2s;
        }

        .toggle-input:checked + .toggle-label {
            background-color: #333;
        }

        .toggle-input:checked + .toggle-label .toggle-slider {
            transform: translateX(24px);
            background-color: #f9f9f9;
        }
    </style>

    <script async src={"https://www.googletagmanager.com/gtag/js?id=G-5RX4PLK2Y2"}></script>
    <script is:inline>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
    
        gtag('js', new Date());
        gtag('config', 'G-5RX4PLK2Y2', {
            page_path: window.location.pathname
        });
    </script>

    </head>

    <body>
    <canvas id="canvas-background"></canvas>
    <div
    class="sidebar-toggle"
    onclick="document.getElementById('sidebar').classList.toggle('open')"
    >
    ☰ Menu
    </div>

    <div class="toggle-switch">
    <input
    type="checkbox"
    id="darkModeToggle"
    class="toggle-input"
    />
    <label for="darkModeToggle" class="toggle-label">
    <span class="toggle-slider"></span>
    </label>
    </div>

    <div class="layout-container">
      <nav id="sidebar">
        <a href="/">← Home</a>
        <h1>China Context</h1>
        <ul id="toc">
          <!-- ToC will be dynamically generated -->
        </ul>
      </nav>

      <main>
        <div class="essay-header">
          <h1 class="essay-title">{title}</h1>
          <div class="essay-meta">Published: {pubDate}</div>
        </div>

        <div class="essay-content">
          <slot/>
        </div>
      </main>
    </div>

    <script>
    document.addEventListener("DOMContentLoaded", () => {
        // Canvas background setup
        const canvas = document.getElementById('canvas-background');
        const ctx = canvas.getContext('2d');

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            drawBackground();
        }

        function drawBackground() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Fill with base color
            const isDark = document.documentElement.classList.contains('dark');
            ctx.fillStyle = isDark ? '#121212' : '#F6F5EF';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

        }

        // Initial setup
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        // Redraw on theme change
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName === 'class') {
                    drawBackground();
                }
            });
        });
        observer.observe(document.documentElement, { attributes: true });

        // 1) Dark-mode toggle (always run)
        const htmlEl = document.documentElement;
        const toggle = document.getElementById("darkModeToggle");
        if (toggle) {
        const stored = localStorage.getItem("theme") || "light";
        if(stored === "dark") {
            htmlEl.classList.add("dark");
            toggle.checked = true;
        }
        toggle.addEventListener("change", () => {
            const isDark = htmlEl.classList.toggle("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
        });
    }

        // 2) Build sophisticated ToC for essays
        const toc = document.getElementById("toc");
        if (toc && toc.children.length === 0) {
            const headings = document.querySelectorAll("main h1[id], main h2[id], main h3[id]");
            const tocStructure = [];
            
            headings.forEach(heading => {
                const level = parseInt(heading.tagName[1]);
                const item = {
                    id: heading.id,
                    text: heading.textContent,
                    level: level,
                    element: document.createElement("li")
                };
                
                const link = document.createElement("a");
                link.href = `#${heading.id}`;
                link.textContent = heading.textContent;
                item.element.appendChild(link);
                
                // Find the right parent based on hierarchy
                if (level === 1) {
                    toc.appendChild(item.element);
                    tocStructure.push(item);
                } else {
                    // Find the most recent parent at a higher level
                    for (let i = tocStructure.length - 1; i >= 0; i--) {
                        if (tocStructure[i].level < level) {
                            let parentElement = tocStructure[i].element;
                            let sublist = parentElement.querySelector('ul');
                            if (!sublist) {
                                sublist = document.createElement('ul');
                                parentElement.appendChild(sublist);
                            }
                            sublist.appendChild(item.element);
                            tocStructure.push(item);
                            break;
                        }
                    }
                }
            });
        }

        // 3) Enhanced scroll spy for hierarchical content
        const sidebarLinks = document.querySelectorAll("#toc a[href^='#']");
        if (sidebarLinks.length === 0) return;

        let isClickScrolling = false;
        function setActive(id) {
            sidebarLinks.forEach(l => {
                l.classList.toggle("active", l.getAttribute("href") === `#${id}`);
            });
        }

        // initial hash highlight
        if (location.hash) setActive(location.hash.slice(1));
        window.addEventListener("hashchange", () => {
            setActive(location.hash.slice(1));
        });

        // smooth scroll + immediate highlight
        sidebarLinks.forEach(link => {
            link.addEventListener("click", e => {
                e.preventDefault();
                const id = link.getAttribute("href").slice(1);
                const target = document.getElementById(id);
                if (!target) return;

                isClickScrolling = true;
                setActive(id);

                const offset = 15;
                const top = target.getBoundingClientRect().top + pageYOffset - offset;
                window.scrollTo({top, behavior: "smooth"});
                history.pushState(null, "", `#${id}`);

                setTimeout(() => {
                    isClickScrolling = false;
                }, 600);
            });
        });

        // Enhanced scroll-spy with IntersectionObserver for hierarchical content
        const headings = Array.from(sidebarLinks).map(l => {
            const el = document.getElementById(l.getAttribute("href").slice(1));
            return el && {id: el.id, element: el, level: parseInt(el.tagName[1])};
        }).filter(Boolean);

        const obs = new IntersectionObserver(
            entries => {
                if (isClickScrolling) return;
                
                // Find the most relevant heading that's currently visible
                const visibleHeadings = entries
                    .filter(e => e.isIntersecting)
                    .map(e => headings.find(h => h.id === e.target.id))
                    .filter(Boolean)
                    .sort((a, b) => a.level - b.level); // Prioritize higher level headings
                
                if (visibleHeadings.length > 0) {
                    setActive(visibleHeadings[0].id);
                }
            },
            {root: null, rootMargin: "0px 0px -50% 0px", threshold: 0}
        );
        headings.forEach(h => obs.observe(h.element));

        // highlight last section when scrolled to bottom
        window.addEventListener("scroll", () => {
            const atBottom = window.innerHeight + pageYOffset >= document.documentElement.scrollHeight - 2;
            if (atBottom && !isClickScrolling) {
                const last = sidebarLinks[sidebarLinks.length - 1];
                setActive(last.getAttribute("href").slice(1));
            }
        });

        // auto-close mobile sidebar
        const sidebar = document.getElementById("sidebar");
        if (sidebar && innerWidth < 800) {
            sidebarLinks.forEach(l => {
                l.addEventListener("click", () => sidebar.classList.remove("open"));
            });
        }
    });
    </script>
    </body>
    </html>